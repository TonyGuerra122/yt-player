name: Build and Release Yt Play

on:
  push:
    branches:
      - main

permissions:
  contents: write

env:
  version: 1.0.0

jobs:
  build-linux:
    name: Build for linux
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Extract Version from pom.xml
        id: extract-version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build and Package (DEB and RPM)
        run: |
          mvn clean package -Djpackage.type=deb
          mvn clean package -Djpackage.type=rpm

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-installers
          path: |
            *.deb
            *.rpm

  build-arch:
  name: Build Arch package
  runs-on: ubuntu-latest
  container: archlinux:base-devel

  steps:
    - name: Setup base system
      run: |
        pacman -Syu --noconfirm
        pacman -S --noconfirm --needed git sudo jdk-openjdk maven base-devel

        # cria usuário não-root para o makepkg
        useradd -m builder
        echo 'builder ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/builder

    - name: Checkout
      uses: actions/checkout@v4

    - name: Prepare workspace for builder
      env:
        GITHUB_WORKSPACE: ${{ github.workspace }}
      run: |
        chown -R builder:builder "$GITHUB_WORKSPACE"
        # evita "unsafe repository" para o usuário novo
        sudo -u builder git config --global --add safe.directory "$GITHUB_WORKSPACE"
        # garantir finais de linha LF (evita BOM/CRLF em scripts)
        sudo -u builder git config --global core.autocrlf false
        sudo -u builder git config --global core.eol lf

    - name: Sync version into PKGBUILD/launcher (opcional)
      env:
        GITHUB_WORKSPACE: ${{ github.workspace }}
      run: |
        # como o build() do PKGBUILD usa mvn, esta etapa é opcional.
        # Se quiser injetar a versão no PKGBUILD/launcher:
        VERSION=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version || true)
        if [[ -n "$VERSION" && "$VERSION" != *"<"* ]]; then
          sed -i "s/pkgver=.*/pkgver=${VERSION}/" arch/PKGBUILD || true
          sed -i "s/@VERSION@/${VERSION}/g" arch/yt-player.launcher 2>/dev/null || true
        fi
        chown -R builder:builder "$GITHUB_WORKSPACE"

    - name: Build pkg.tar.zst (makepkg como usuário normal)
      working-directory: arch
      run: |
        sudo -u builder bash -lc 'makepkg -sfc --noconfirm'
        ls -l *.pkg.tar.zst

    - name: Upload Arch Artifact
      uses: actions/upload-artifact@v4
      with:
        name: arch-package
        path: arch/*.pkg.tar.zst

  build-windows:
    name: Build for Windows
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 21

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: C:\\Users\\runneradmin\\.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Extract Version from pom.xml
        shell: pwsh
        run: |
          $version = & mvn help:evaluate "-Dexpression=project.version" "-q" "-DforceStdout" | Select-Object -First 1
          Write-Host "Resolved version: $version"
            
          if ([string]::IsNullOrWhiteSpace($version) -or $version -like "<*") {
            Write-Error "Invalid or missing version: $version"
            exit 1
          }
            
          "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Build JAR
        run: mvn clean package

      - name: Verify JAR in Target
        run: ls -l target

      - name: Build and Package (MSI)
        run: |
          jpackage `
          --name "YT Player" `
          --input target `
          --main-jar yt-player-${{ env.VERSION }}.jar `
          --main-class com.tonyguerra.ytplayer.Main `
          --app-version ${{ env.VERSION }} `
          --win-upgrade-uuid ${{ secrets.APP_UUID }} `
          --type msi `
          --icon src/main/resources/com/tonyguerra/ytplayer/favicon.ico `
          --win-menu

      - name: Rename MSI
        run: |
          $msiFile = Get-ChildItem -Path . -Filter "*.msi" | Select-Object -First 1
          $newName = "YTPlayer.msi"
          Rename-Item -Path $msiFile.FullName -NewName $newName

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            *.msi

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - build-linux
      - build-windows

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Linux Installers
        uses: actions/download-artifact@v4
        with:
          name: linux-installers
          path: artifacts/linux

      - name: Download Windows Installer
        uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: artifacts/windows

      - name: Download Arch Package
        uses: actions/download-artifact@v4
        with:
          name: arch-package
          path: artifacts/arch

      - name: List Artifacts
        run: |
          echo "Linux Installers:"
          ls -l artifacts/linux
          echo "Windows Installer:"
          ls -l artifacts/windows

      - name: Extract Version from Maven
        id: extract-version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release with Artifacts
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          name: YT Player v${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            artifacts/linux/*.deb
            artifacts/linux/*.rpm
            artifacts/windows/*.msi
            artifacts/arch/*.pkg.tar.zst
